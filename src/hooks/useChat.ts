import { useState } from 'react';
import { ChatMessage } from '../types';

export const useChat = (initialMessages: ChatMessage[] = []) => {
  const [messages, setMessages] = useState<ChatMessage[]>(initialMessages);
  const [isLoading, setIsLoading] = useState(false);

  const sendMessage = async (question: string) => {
    if (!question.trim()) return;

    setIsLoading(true);

    // Simulate API call
    setTimeout(() => {
      const newMessage: ChatMessage = {
        id: Date.now().toString(),
        question,
        answer: 'This is a simulated response. In a real application, this would be generated by AI based on the video content.',
        timestamp: new Date()
      };

      setMessages(prev => [...prev, newMessage]);
      setIsLoading(false);
    }, 1000);
  };

  const addFeedback = (messageId: string, feedback: 'like' | 'dislike', feedbackText?: string, category?: string) => {
    setMessages(prev => 
      prev.map(msg => 
        msg.id === messageId ? { 
          ...msg, 
          feedback,
          ...(feedbackText && { feedbackText }),
          ...(category && { feedbackCategory: category })
        } : msg
      )
    );
    
    // Log feedback for analytics (in real app, this would be sent to backend)
    if (feedback === 'dislike' && (feedbackText || category)) {
      console.log('Negative feedback received:', {
        messageId,
        category,
        feedbackText,
        timestamp: new Date()
      });
    }
  };

  return {
    messages,
    sendMessage,
    addFeedback,
    isLoading
  };
};